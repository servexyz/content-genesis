/**
 * @Author: Alec Hale-Pletka <alechp>
 * @Date:   2018-01-24T16:32:34-08:00
 * @Email:  alec@bubblegum.academy
 * @Last modified by:   alechp
 * @Last modified time: 2018-01-25T16:43:11-08:00
 */
const log = console.log;
const path = require("path");
const chalk = require("chalk");
const empty = require("is-empty");
const { fluent } = require("./helpers.js");

/**
 * Interpolation for templating
 * @param {[string]} template  [multiline template string generated by github.com/sindresorhus/multiline]
 * @param {[object]} variables [variables being interpolated, eg. {foo: 'bar'}]
 */
function interpolate(template, variables) {}

// let template = () => {
//   let t = this.template;
//   return (t) => {
//   let sanitized = t
//     .replace(/\$\{([\s]*[^;\s\{]+[\s]*)\}/g, function(_, match) {
//       return `\$\{map.${match.trim()}\}`;
//     })
//     // Afterwards, replace anything that's not ${map.expressions}' (etc) with a blank string.
//     .replace(/(\$\{(?!map\.)[^}]+\})/g, "");
//   return sanitized;
// }
// return Function("map", `return \`${sanitized}\``); // whats with backticks yo ?
// let templateGenerator = template => {};
// const play = () => {
//   let _t = this;
//
//   return {
//     thising: () => {
//       log(_t);
//       log(this);
//     }
//   };
// };
//
// play().thising();
