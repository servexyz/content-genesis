/**
 * @Author: Alec Hale-Pletka <alechp>
 * @Date:   2018-01-24T16:32:34-08:00
 * @Email:  alec@bubblegum.academy
 * @Last modified by:   alechp
 * @Last modified time: 2018-01-26T11:04:44-08:00
 */
const log = console.log;
const path = require("path");
const chalk = require("chalk");
const empty = require("is-empty");
const { fluent } = require("./helpers.js");

/**
 * Interpolation for templating
 * @param {[string]} template  [multiline template string generated by github.com/sindresorhus/multiline]
 * @param {[object]} variables [variables being interpolated, eg. {foo: 'bar'}]
 */

let sanitize = multiline => {
  let replaceMe = multiline
    // Replace ${expressions} (etc) with ${map.expressions}.
    .replace(/\$\{([\s]*[^;\s\{]+[\s]*)\}/g, function(_, match) {
      return `\$\{map.${match.trim()}\}`;
    })
    // Afterwards, replace anything that's not ${map.expressions}' (etc) with a blank string.
    .replace(/(\$\{(?!map\.)[^}]+\})/g, "");

  return new Function("map", `return \`${replaceMe}\``);
  //sanitize
};

let interpolate = (sanitizedTemplateString, variables) => {
  return sanitizedTemplateString(variables);
};

const { TEMPLATE } = require(path.join(
  __dirname,
  "../templates/sample.template.js"
));
let foo = { component: "foo" };
let bar = { component: "bar" };
let abc = sanitize(TEMPLATE);
let inted = interpolate(abc, foo);
let inted2 = interpolate(abc, bar);

module.exports = {
  abc,
  inted,
  inted2
};
